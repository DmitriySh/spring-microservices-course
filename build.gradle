import java.time.ZonedDateTime

ext {
    buildVesion = '0.1'
    jacksonVersion = "2.8.7"
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}

task printVersion {
    logger.quiet "Version $buildVesion"
}

subprojects {
    apply plugin: 'java'
    group = 'ru.shishmakov'
    version = buildVesion

    tasks.withType(JavaCompile) {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    repositories {
        jcenter()
        mavenLocal()
        maven { url "http://repo.spring.io/libs-release" }
    }

    tasks.withType(Jar) { jar ->
        jar.manifest.attributes(
                'Created-By': 'Gradle ' + gradle.gradleVersion + ', Java ' + JavaVersion.current(),
                'Date': ZonedDateTime.now(),
                'Implementation-Title': project.name,
                'Implementation-Version': version,
                'Implementation-Vendor': 'ru.shishmakov'
        )
        if (!project.name.startsWith("shared")) {
            jar.baseName = project.name + '-all'
            jar.from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        }
    }
}

configure(subprojects) {
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    dependencies {
        compile 'ch.qos.logback:logback-classic:1+'
        compile 'org.apache.commons:commons-lang3:3+'

        compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
        compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"

        testCompile 'org.hamcrest:hamcrest-all:1.3'
        testCompile 'junit:junit:4.12'
    }

    test {
        useJUnit()
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
        minHeapSize = '32M'
        maxHeapSize = '256M'
    }
}